import mysql from 'mysql';
import util from 'util';

import { config } from '../../config/config.mjs';

class BaseDao {
  constructor(daoConfig = {}) {
    this.daoConfig = daoConfig;
    this.tableName = this.daoConfig?.tableName;
    this.enableLogs = config.enableLogs;

    if (!this.daoConfig?.tableName) {
      throw new Error('❌ tableName property is mandatory.');
    }

    this.pool = mysql.createPool({
      connectionLimit: config?.database?.connectionLimit,
      host: config?.database?.host,
      user: config?.database?.user,
      password: config?.database?.password,
      database: config?.database?.database
    });

    this.pool.query = util.promisify(this.pool.query);

    this.select = this.select.bind(this);
    this.save = this.save.bind(this);
    this.byId = this.byId.bind(this);
    this.all = this.all.bind(this);
  }

  getPool() {
    return this.pool;
  }

  all() {
    return this.pool.query('SELECT * FROM ??', [this.tableName]);
  }

  select(criteriaObject) {
    if (!criteriaObject) {
      throw new Error('❌ selectKeys argument is mandatory.');
    }

    let sql = `SELECT * FROM ${this.tableName} WHERE `;

    sql = this.getSQLQuery(criteriaObject, sql);

    return this.pool.query(sql);
  }

  getSQLQuery(criteriaObject, sql) {
    if (criteriaObject) {
      const primitiveCriteria = this.#dropClauseProperties(criteriaObject);

      sql = this.constructWhereClause(primitiveCriteria, sql, CriteriaSymbol.EQUAL);

      if (criteriaObject.greatherThan) {
        sql = this.constructWhereClause(criteriaObject.greatherThan, sql, CriteriaSymbol.GREATHER_THAN);
      }

      if (criteriaObject.lessThan) {
        sql = this.constructWhereClause(criteriaObject.lessThan, sql, CriteriaSymbol.LESS_THAN);
      }

      if (criteriaObject.greatherOrEqualTo) {
        sql = this.constructWhereClause(criteriaObject.greatherOrEqualTo, sql, CriteriaSymbol.GREATHER_OR_EQUAL_TO);
      }

      if (criteriaObject.lessOrEqualTo) {
        sql = this.constructWhereClause(criteriaObject.lessOrEqualThan, sql, CriteriaSymbol.LESS_OR_EQUAL_TO);
      }
    }

    if (this.enableLogs) {
      console.log(sql);
    }

    return sql;
  }

  constructWhereClause(criteriaObject, sql, criteriaSymbol = CriteriaSymbol.EQUAL, condition = CriteriaSymbol.AND) {
    if (!sql.endsWith('WHERE ')) {
      sql += ` ${condition} `
    }

    if (criteriaObject) {

      const length = Object.keys(criteriaObject).length;

      if (this.enableLogs) {
        console.log('keys: ', Object.keys(criteriaObject));
      }

      Object.keys(criteriaObject).forEach((key, index) => {

        sql += `${key} ${criteriaSymbol} ${this.pool.escape(criteriaObject[key])}`;

        if (++index < length) {
          sql += ` ${condition} `;
        }

        if (this.enableLogs) {
          console.log('GENREATED SQL: ', sql);
        }
      });
    }

    return sql;
  }

  #dropClauseProperties(criteriaObject) {
    const keys = Object.keys(criteriaObject).filter(criteria => !CriteriaSymbol.OPERATIONS.includes(criteria));

    let newCriteria = {}

    keys.forEach(key => {
      newCriteria[key] = criteriaObject[key];
      console.log(newCriteria);
    });

    return newCriteria;
  }

  save(entity) {
    let sql;

    if (entity.id) {
      sql = 'UPDATE ?? SET ? WHERE id = ?'
    } else {
      sql = 'INSERT INTO ?? SET ?';
    }

    if (this.enableLogs) {
      console.log('=> PERSISTING WITH QUERY ', sql);
    }

    return this.pool.query(sql, [this.tableName, entity, entity.id]);
  }

  byId(id) {
    const query = `SELECT * FROM ?? WHERE id = ?`;
    return this.pool.query(query, [this.tableName, id]);
  }

  delete(id) {
    const query = `DELETE FROM ?? WHERE id = ?`;
    this.pool.query(query, [this.tableName, id]);
  }
}

class CriteriaSymbol {
  static GREATHER_THAN = '>';
  static GREATHER_OR_EQUAL_TO = '>=';
  static LESS_THAN = '<';
  static LESS_OR_EQUAL_TO = '<=';
  static EQUAL = '=';
  static AND = 'AND';

  static ALL = [
    this.GREATHER_THAN,
    this.GREATHER_OR_EQUAL_TO,
    this.LESS_THAN,
    this.LESS_OR_EQUAL_TO,
    this.EQUAL,
    this.AND
  ];

  static OPERATIONS = [
    'greatherThan',
    'greatherOrEqualTo',
    'lessThan',
    'lessOrEqualTo',
    'equal',
    'and'
  ]
}

export { BaseDao };
